{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joao\\\\Desktop\\\\dashboard\\\\minha-carteira\\\\src\\\\hooks\\\\theme.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from 'react';\nimport dark from '../styles/themes/dark';\nimport light from '../styles/themes/light';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({});\n\nconst ThemeProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState(() => {\n    const themeSaved = localStorage.getItem('@minha-carteira:theme');\n\n    if (themeSaved) {\n      return JSON.parse(themeSaved);\n    } else {\n      return dark;\n    }\n  });\n\n  const toggleTheme = () => {\n    if (theme.title === 'dark') {\n      setTheme(light);\n      localStorage.setItem('@minha-carteira:theme', JSON.stringify(light));\n    } else {\n      setTheme(dark);\n      localStorage.setItem('@minha-carteira:theme', JSON.stringify(dark));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      toggleTheme,\n      theme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeProvider, \"BNBIT/a5V4hRDVwEMkjNmCSXkxQ=\");\n\n_c = ThemeProvider;\n\nfunction useTheme() {\n  _s2();\n\n  const context = useContext(ThemeContext);\n  return context;\n}\n\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { ThemeProvider, useTheme };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["C:/Users/joao/Desktop/dashboard/minha-carteira/src/hooks/theme.tsx"],"names":["React","createContext","useContext","useState","dark","light","ThemeContext","ThemeProvider","children","theme","setTheme","themeSaved","localStorage","getItem","JSON","parse","toggleTheme","title","setItem","stringify","useTheme","context"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA0D,OAA1D;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAuBA,MAAMC,YAAY,gBAAGL,aAAa,CAAgB,EAAhB,CAAlC;;AAEA,MAAMM,aAAuB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAS,MAAM;AAC7C,UAAMQ,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAnB;;AAEA,QAAGF,UAAH,EAAe;AACX,aAAOG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAP;AACH,KAFD,MAEM;AACF,aAAOP,IAAP;AACH;AACJ,GARiC,CAAlC;;AAUA,QAAMY,WAAW,GAAG,MAAM;AACtB,QAAGP,KAAK,CAACQ,KAAN,KAAgB,MAAnB,EAA0B;AACtBP,MAAAA,QAAQ,CAACL,KAAD,CAAR;AACAO,MAAAA,YAAY,CAACM,OAAb,CAAqB,uBAArB,EAA8CJ,IAAI,CAACK,SAAL,CAAed,KAAf,CAA9C;AACH,KAHD,MAGM;AACFK,MAAAA,QAAQ,CAACN,IAAD,CAAR;AACAQ,MAAAA,YAAY,CAACM,OAAb,CAAqB,uBAArB,EAA8CJ,IAAI,CAACK,SAAL,CAAef,IAAf,CAA9C;AACH;AACJ,GARD;;AAUA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEY,MAAAA,WAAF;AAAeP,MAAAA;AAAf,KAA9B;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BD;;GAAMD,a;;KAAAA,a;;AA4BN,SAASa,QAAT,GAAmC;AAAA;;AAC/B,QAAMC,OAAO,GAAGnB,UAAU,CAACI,YAAD,CAA1B;AAEA,SAAOe,OAAP;AACH;;IAJQD,Q;;AAMT,SAASb,aAAT,EAAwBa,QAAxB","sourcesContent":["\r\nimport React, { createContext, useContext, useState} from 'react';\r\n\r\nimport dark from '../styles/themes/dark';\r\nimport light from '../styles/themes/light';\r\n\r\ninterface IThemeContext {\r\n    toggleTheme(): void;\r\n    theme:ITheme;\r\n}\r\n\r\ninterface ITheme {\r\n    title: string;\r\n\r\n    colors: {\r\n        primary: string;\r\n        secondary: string;\r\n        tertiary: string;\r\n        white: string;\r\n        black: string;\r\n        gray: string;\r\n        success: string;\r\n        infor: string;\r\n        warning: string;\r\n    }\r\n}\r\n\r\nconst ThemeContext = createContext<IThemeContext>({} as IThemeContext);\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => {\r\n    const [theme, setTheme] = useState<ITheme>(() => {\r\n        const themeSaved = localStorage.getItem('@minha-carteira:theme');\r\n\r\n        if(themeSaved) {\r\n            return JSON.parse(themeSaved);\r\n        } else{\r\n            return dark;\r\n        }\r\n    });\r\n\r\n    const toggleTheme = () => {\r\n        if(theme.title === 'dark'){\r\n            setTheme(light);\r\n            localStorage.setItem('@minha-carteira:theme', JSON.stringify(light));\r\n        } else{\r\n            setTheme(dark);\r\n            localStorage.setItem('@minha-carteira:theme', JSON.stringify(dark));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <ThemeContext.Provider value={{ toggleTheme, theme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nfunction useTheme(): IThemeContext {\r\n    const context = useContext(ThemeContext)\r\n\r\n    return context;\r\n}\r\n\r\nexport { ThemeProvider, useTheme };"]},"metadata":{},"sourceType":"module"}