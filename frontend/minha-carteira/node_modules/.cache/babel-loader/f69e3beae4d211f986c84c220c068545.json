{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\PICHAU\\\\Desktop\\\\minha-carteira\\\\frontend\\\\minha-carteira\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\PICHAU\\\\Desktop\\\\minha-carteira\\\\frontend\\\\minha-carteira\\\\src\\\\pages\\\\Dashboard\\\\index.tsx\";\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport ContentHeader from '../../components/ContentHeader';\nimport SelectInput from '../../components/SelectInput';\nimport WalletBox from '../../components/WalletBox';\nimport MessageBox from '../../components/MessageBox';\nimport PieChartBox from '../../components/PieChartBox';\nimport happyImg from \"../../assets/happy.svg\";\nimport sadImg from \"../../assets/sad.svg\";\nimport grinningImg from \"../../assets/grinning.svg\";\nimport listOfMonths from '../../utils/months';\nimport axios from 'axios';\nimport { Container, Content } from './styles';\n\nvar Dashboard = function Dashboard() {\n  var _useState = useState(new Date().getMonth() + 1),\n      _useState2 = _slicedToArray(_useState, 2),\n      monthSelect = _useState2[0],\n      setMonthSelected = _useState2[1];\n\n  var _useState3 = useState(new Date().getFullYear()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      yearSelect = _useState4[0],\n      setYearSelected = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expenses = _useState6[0],\n      setExpenses = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gains = _useState8[0],\n      setGains = _useState8[1]; // const [balance, setBalance] = useState<number>(0);\n\n\n  var handleMonthSelected = useCallback(function (month) {\n    try {\n      var parseMonth = Number(month);\n      setMonthSelected(parseMonth);\n    } catch (error) {\n      throw new Error('invalid month value; Is accept 0 - 12.');\n    }\n  }, []);\n  var handleYearSelected = useCallback(function (year) {\n    try {\n      var parseYear = Number(year);\n      setYearSelected(parseYear);\n    } catch (error) {\n      throw new Error('invalid Year value');\n    }\n  }, []);\n  var months = [{\n    value: 1,\n    label: 'Janeiro'\n  }, {\n    value: 2,\n    label: 'Fevereiro'\n  }, {\n    value: 3,\n    label: 'Março'\n  }, {\n    value: 4,\n    label: 'Abril'\n  }, {\n    value: 5,\n    label: 'Maio'\n  }, {\n    value: 6,\n    label: 'Junho'\n  }, {\n    value: 7,\n    label: 'Julho'\n  }, {\n    value: 8,\n    label: 'Agosto'\n  }, {\n    value: 9,\n    label: 'Setembro'\n  }, {\n    value: 10,\n    label: 'Outubro'\n  }, {\n    value: 11,\n    label: 'Novembro'\n  }, {\n    value: 12,\n    label: 'Dezembro'\n  }];\n  var years = [{\n    value: 2022,\n    label: 2022\n  }, {\n    value: 2023,\n    label: 2023\n  }];\n\n  function updateGains() {\n    axios.post('http://localhost:8080/estatisticas/total-expenses', {\n      \"userId\": localStorage.getItem('@minha-carteira:userId'),\n      \"month\": monthSelect,\n      \"year\": yearSelect,\n      \"cashFlowType\": \"INPUT\"\n    }).then(function (response) {\n      console.log(response.data);\n      setGains(Number(response.data.totalExpenses));\n    });\n  }\n\n  function updateExpenses() {\n    axios.post('http://localhost:8080/estatisticas/total-expenses', {\n      \"userId\": localStorage.getItem('@minha-carteira:userId'),\n      \"month\": monthSelect,\n      \"year\": yearSelect,\n      \"cashFlowType\": \"OUTPUT\"\n    }).then(function (response) {\n      setExpenses(Number(response.data.totalExpenses));\n    });\n  } // function updateBalance() {\n  //     setBalance(gains - expenses);\n  // }\n\n\n  useEffect(function () {\n    updateGains();\n    updateExpenses();\n  }, [monthSelect, yearSelect]); // useEffect (() => {\n  //     updateBalance();\n  // }, [gains, expenses])\n\n  var balance = useMemo(function () {\n    return gains - expenses;\n  }, [gains, expenses]); // const totalExpenses = useMemo(() => {\n  //     let total: number = 0;\n  //     axios.post('http://localhost:8080/estatisticas/total-expenses', {\n  //             \"userId\": localStorage.getItem('@minha-carteira:userId'),\n  //             \"month\": monthSelect,\n  //             \"year\": yearSelect,\n  //             \"cashFlowType\": \"OUTPUT\"\n  //         })\n  //         .then(response => {\n  //             total = Number(response.data.totalExpenses);\n  //         })\n  //     console.log('Expenses:');\n  //     console.log(total);\n  //     return total;\n  //     // expenses.forEach(item => {\n  //     //     const date = new Date(item.date);\n  //     //     const year = date.getFullYear();\n  //     //     const month = date.getMonth() + 1;\n  //     //     if(month === monthSelect && year === yearSelect){\n  //     //         try {\n  //     //             total += Number(item.amount);\n  //     //         }catch{\n  //     //             throw new Error('Invalid amount!');\n  //     //         }\n  //     //     }\n  //     // });\n  //     // return total;\n  // },[monthSelect, yearSelect]);\n  // const totalGains = useMemo(() => {\n  //     let total: number = 0;\n  //     axios.post('http://localhost:8080/estatisticas/total-expenses', {\n  //             \"userId\": localStorage.getItem('@minha-carteira:userId'),\n  //             \"month\": monthSelect,\n  //             \"year\": yearSelect,\n  //             \"cashFlowType\": \"INPUT\"\n  //         })\n  //         .then(response => {\n  //             console.log(response.data)\n  //             total += Number(response.data.totalExpenses);\n  //         })\n  //     console.log('Gains:');\n  //     console.log(total);\n  //     console.log(monthSelect);\n  //     console.log(yearSelect);\n  //     return total;\n  //     // let total: number = 0;\n  //     // gains.forEach(item => {\n  //     //     const date = new Date(item.date);\n  //     //     const year = date.getFullYear();\n  //     //     const month = date.getMonth() + 1;\n  //     //     if(month === monthSelect && year === yearSelect){\n  //     //         try {\n  //     //             total += Number(item.amount);\n  //     //         }catch{\n  //     //             throw new Error('Invalid amount!');\n  //     //         }\n  //     //     }\n  //     // });\n  //     // return total;\n  // },[monthSelect, yearSelect]);\n  // const totalBalance = useMemo(() => {\n  //     return totalGains - totalExpenses;\n  // }, [totalGains, totalExpenses]);\n\n  var message = useMemo(function () {\n    if (balance < 0) {\n      return {\n        title: \"Que triste!\",\n        description: \"Nesse mës vocë gastou mais do que deveria!\",\n        footerText: \"Verifique seus gastos.\",\n        icon: sadImg\n      };\n    } else if (expenses === 0 && gains === 0) {\n      return {\n        title: \"Ops!\",\n        description: \"Neste mês, não há registros!!\",\n        footerText: \"Nenhum registro cadastrado esse mês.\",\n        icon: grinningImg\n      };\n    } else if (balance === 0) {\n      return {\n        title: \"Ufa!\",\n        description: \"Quase Hein!!\",\n        footerText: \"Tenha cuidado.\",\n        icon: grinningImg\n      };\n    } else {\n      return {\n        title: \"Muito bem!\",\n        description: \"Sua carteira fechou positiva!\",\n        footerText: \"Continue assim.\",\n        icon: happyImg\n      };\n    }\n  }, [balance, expenses, gains]);\n  var relationExpensesVersusGains = useMemo(function () {\n    var total = gains + expenses;\n    var percentGains = Number((gains / total * 100).toFixed(1));\n    var percentExpenses = Number((expenses / total * 100).toFixed(1));\n    var data = [{\n      name: \"Entradas\",\n      value: gains,\n      percent: percentGains ? percentGains : 0,\n      color: '#e44c4e'\n    }, {\n      name: \"Saídas\",\n      value: expenses,\n      percent: percentExpenses ? percentExpenses : 0,\n      color: '#f7931b'\n    }];\n    return data;\n  }, [gains, expenses]);\n  var historyData = useMemo(function () {\n    return listOfMonths.map(function (_, month) {\n      var amountEntry = 0;\n      gains.forEach(function (gain) {\n        var date = new Date(gain.date);\n        var gainMonth = date.getMonth();\n        var gainYear = date.getFullYear();\n\n        if (gainMonth === month && gainYear === yearSelect) {\n          try {\n            amountEntry += Number(gain.amount);\n          } catch (_unused) {\n            throw new Error('amountEntry is invalid!');\n          }\n        }\n      });\n      var amountOutput = 0;\n      gains.forEach(function (expense) {\n        var date = new Date(expense.date);\n        var expenseMonth = date.getMonth() + 1;\n        var expenseYear = date.getFullYear();\n\n        if (expenseMonth === month && expenseYear === yearSelect) {\n          try {\n            amountOutput += Number(expense.amount);\n          } catch (_unused2) {\n            throw new Error('amountOutput is invalid!');\n          }\n        }\n      });\n      return {\n        monthNumber: month,\n        month: listOfMonths[month].substr(0, 3),\n        amountEntry: amountEntry,\n        amountOutput: amountOutput\n      };\n    }).filter(function (item) {\n      var currentMonth = new Date().getMonth();\n      var currentYear = new Date().getFullYear();\n      return yearSelect === currentYear && item.monthNumber <= currentMonth || yearSelect < currentYear;\n    });\n  }, [yearSelect]);\n  var relationExpensesRecurrentVersusEventual = useMemo(function () {\n    var amountRecurrent = 0;\n    var amountEventual = 0;\n    expenses.filter(function (expense) {\n      var date = new Date(expense.date);\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      return month === monthSelect && year === yearSelect;\n    }).forEach(function (expense) {\n      if (expense.frequency === 'recorrente') {\n        return amountRecurrent += Number(expense.amount);\n      }\n\n      if (expense.frequency === 'eventual') {\n        return amountEventual += Number(expense.amount);\n      }\n    });\n    var total = amountRecurrent + amountEventual;\n    var recurrentPercent = Number((amountRecurrent / total * 100).toFixed(1));\n    var eventualPercent = Number((amountEventual / total * 100).toFixed(1));\n    return [{\n      name: \"Recorrentes\",\n      amount: amountRecurrent,\n      percent: recurrentPercent ? recurrentPercent : 0,\n      color: \"#f7931b\"\n    }, {\n      name: \"Eventuais\",\n      amount: amountEventual,\n      percent: eventualPercent ? eventualPercent : 0,\n      color: \"#e44c4e\"\n    }];\n  }, [monthSelect, yearSelect]);\n  var relationGainsRecurrentVersusEventual = useMemo(function () {\n    var amountRecurrent = 0;\n    var amountEventual = 0;\n    gains.filter(function (gain) {\n      var date = new Date(gain.date);\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      return month === monthSelect && year === yearSelect;\n    }).forEach(function (gain) {\n      if (gain.frequency === 'recorrente') {\n        return amountRecurrent += Number(gain.amount);\n      }\n\n      if (gain.frequency === 'eventual') {\n        return amountEventual += Number(gain.amount);\n      }\n    });\n    var total = amountRecurrent + amountEventual;\n    var recurrentPercent = Number((amountRecurrent / total * 100).toFixed(1));\n    var eventualPercent = Number((amountEventual / total * 100).toFixed(1));\n    return [{\n      name: \"Recorrentes\",\n      amount: amountRecurrent,\n      percent: recurrentPercent ? recurrentPercent : 0,\n      color: \"#f7931b\"\n    }, {\n      name: \"Eventuais\",\n      amount: amountEventual,\n      percent: eventualPercent ? eventualPercent : 0,\n      color: \"#e44c4e\"\n    }];\n  }, [monthSelect, yearSelect]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ContentHeader, {\n    title: \"Dashboard\",\n    lineColor: \"#f7931b\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectInput, {\n    options: months,\n    onChange: function onChange(e) {\n      return handleMonthSelected(e.target.value);\n    },\n    defaultValue: monthSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SelectInput, {\n    options: years,\n    onChange: function onChange(e) {\n      return handleYearSelected(e.target.value);\n    },\n    defaultValue: yearSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"Saldo\",\n    amount: balance,\n    footerLabel: \"atualizado com base\",\n    icon: \"dolar\",\n    color: \"#4e41f0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"Entradas\",\n    amount: gains,\n    footerLabel: \"entradas\",\n    icon: \"arrowUp\",\n    color: \"#f7931b\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"Sa\\xEDdas\",\n    amount: expenses,\n    footerLabel: \"Sa\\xEDdas\",\n    icon: \"arrowDown\",\n    color: \"#e44c4e\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MessageBox, {\n    title: message.title,\n    description: message.description,\n    footerText: message.footerText,\n    icon: message.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PieChartBox, {\n    data: relationExpensesVersusGains,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Dashboard;","map":{"version":3,"names":["React","useState","useMemo","useCallback","useEffect","ContentHeader","SelectInput","WalletBox","MessageBox","PieChartBox","listOfMonths","axios","Container","Content","Dashboard","Date","getMonth","monthSelect","setMonthSelected","getFullYear","yearSelect","setYearSelected","expenses","setExpenses","gains","setGains","handleMonthSelected","month","parseMonth","Number","error","Error","handleYearSelected","year","parseYear","months","value","label","years","updateGains","post","localStorage","getItem","then","response","console","log","data","totalExpenses","updateExpenses","balance","message","title","description","footerText","icon","sadImg","grinningImg","happyImg","relationExpensesVersusGains","total","percentGains","toFixed","percentExpenses","name","percent","color","historyData","map","_","amountEntry","forEach","gain","date","gainMonth","gainYear","amount","amountOutput","expense","expenseMonth","expenseYear","monthNumber","substr","filter","item","currentMonth","currentYear","relationExpensesRecurrentVersusEventual","amountRecurrent","amountEventual","frequency","recurrentPercent","eventualPercent","relationGainsRecurrentVersusEventual","e","target"],"sources":["C:/Users/PICHAU/Desktop/minha-carteira/frontend/minha-carteira/src/pages/Dashboard/index.tsx"],"sourcesContent":["\r\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\r\n\r\nimport ContentHeader from '../../components/ContentHeader';\r\nimport SelectInput from '../../components/SelectInput';\r\nimport WalletBox from '../../components/WalletBox';\r\nimport MessageBox from '../../components/MessageBox';\r\nimport PieChartBox from '../../components/PieChartBox';\r\nimport HistoryBox from '../../components/HistoryBox';\r\nimport BarChartBox from '../../components/BarChartBox';\r\n\r\nimport happyImg from '../../assets/happy.svg';\r\nimport sadImg from '../../assets/sad.svg';\r\nimport grinningImg from '../../assets/grinning.svg';\r\n\r\nimport expenses from '../../repositories/expenses';\r\nimport gains from '../../repositories/gains';\r\n\r\nimport listOfMonths from '../../utils/months';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Container,\r\n    Content,\r\n} from './styles';\r\n\r\nconst Dashboard: React.FC = () => {\r\n\r\n    const [monthSelect, setMonthSelected] = useState<number>(new Date().getMonth() + 1);\r\n    const [yearSelect, setYearSelected] = useState<number>(new Date().getFullYear());\r\n\r\n    const [expenses, setExpenses] = useState<number>(0);\r\n    const [gains, setGains] = useState<number>(0);\r\n    // const [balance, setBalance] = useState<number>(0);\r\n\r\n    const handleMonthSelected = useCallback((month : string) => {\r\n        try {\r\n            const parseMonth = Number(month);\r\n            setMonthSelected(parseMonth);\r\n        } catch (error) {\r\n            throw new Error('invalid month value; Is accept 0 - 12.');\r\n        }\r\n    }, []);\r\n\r\n    const handleYearSelected = useCallback((year : string) => {\r\n        try {\r\n            const parseYear = Number(year);\r\n            setYearSelected(parseYear);\r\n        } catch (error) {\r\n            throw new Error('invalid Year value');\r\n        }\r\n    }, []);\r\n\r\n    const months = [\r\n        {value: 1, label: 'Janeiro'},\r\n        {value: 2, label: 'Fevereiro'},\r\n        {value: 3, label: 'Março'},\r\n        {value: 4, label: 'Abril'},\r\n        {value: 5, label: 'Maio'},\r\n        {value: 6, label: 'Junho'},\r\n        {value: 7, label: 'Julho'},\r\n        {value: 8, label: 'Agosto'},\r\n        {value: 9, label: 'Setembro'},\r\n        {value: 10, label: 'Outubro'},\r\n        {value: 11, label: 'Novembro'},\r\n        {value: 12, label: 'Dezembro'},\r\n    ];\r\n\r\n    const years = [\r\n        {value: 2022, label: 2022},\r\n        {value: 2023, label: 2023},\r\n    ];\r\n    \r\n    function updateGains() {\r\n        axios.post('http://localhost:8080/estatisticas/total-expenses', {\r\n                \"userId\": localStorage.getItem('@minha-carteira:userId'),\r\n                \"month\": monthSelect,\r\n                \"year\": yearSelect,\r\n                \"cashFlowType\": \"INPUT\"\r\n            })\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setGains(Number(response.data.totalExpenses));\r\n            })\r\n    }\r\n\r\n    function updateExpenses() {\r\n        axios.post('http://localhost:8080/estatisticas/total-expenses', {\r\n                \"userId\": localStorage.getItem('@minha-carteira:userId'),\r\n                \"month\": monthSelect,\r\n                \"year\": yearSelect,\r\n                \"cashFlowType\": \"OUTPUT\"\r\n            })\r\n            .then(response => {\r\n                setExpenses(Number(response.data.totalExpenses));\r\n            })\r\n    }\r\n\r\n    // function updateBalance() {\r\n    //     setBalance(gains - expenses);\r\n    // }\r\n\r\n    useEffect (() => {\r\n\r\n        updateGains();\r\n        updateExpenses();\r\n        \r\n\r\n    }, [monthSelect, yearSelect])\r\n\r\n    // useEffect (() => {\r\n    //     updateBalance();\r\n    // }, [gains, expenses])\r\n\r\n    const balance = useMemo(() => {\r\n        return gains - expenses;\r\n    },[gains, expenses])\r\n\r\n    // const totalExpenses = useMemo(() => {\r\n    //     let total: number = 0;\r\n        \r\n    //     axios.post('http://localhost:8080/estatisticas/total-expenses', {\r\n    //             \"userId\": localStorage.getItem('@minha-carteira:userId'),\r\n    //             \"month\": monthSelect,\r\n    //             \"year\": yearSelect,\r\n    //             \"cashFlowType\": \"OUTPUT\"\r\n    //         })\r\n    //         .then(response => {\r\n    //             total = Number(response.data.totalExpenses);\r\n    //         })\r\n    //     console.log('Expenses:');\r\n    //     console.log(total);\r\n    //     return total;\r\n\r\n    //     // expenses.forEach(item => {\r\n    //     //     const date = new Date(item.date);\r\n    //     //     const year = date.getFullYear();\r\n    //     //     const month = date.getMonth() + 1;\r\n\r\n    //     //     if(month === monthSelect && year === yearSelect){\r\n    //     //         try {\r\n    //     //             total += Number(item.amount);\r\n    //     //         }catch{\r\n    //     //             throw new Error('Invalid amount!');\r\n    //     //         }\r\n    //     //     }\r\n    //     // });\r\n\r\n    //     // return total;\r\n    // },[monthSelect, yearSelect]);\r\n\r\n    // const totalGains = useMemo(() => {\r\n\r\n    //     let total: number = 0;\r\n        \r\n    //     axios.post('http://localhost:8080/estatisticas/total-expenses', {\r\n    //             \"userId\": localStorage.getItem('@minha-carteira:userId'),\r\n    //             \"month\": monthSelect,\r\n    //             \"year\": yearSelect,\r\n    //             \"cashFlowType\": \"INPUT\"\r\n    //         })\r\n    //         .then(response => {\r\n    //             console.log(response.data)\r\n    //             total += Number(response.data.totalExpenses);\r\n    //         })\r\n    //     console.log('Gains:');\r\n    //     console.log(total);\r\n    //     console.log(monthSelect);\r\n    //     console.log(yearSelect);\r\n    //     return total;\r\n    //     // let total: number = 0;\r\n\r\n    //     // gains.forEach(item => {\r\n    //     //     const date = new Date(item.date);\r\n    //     //     const year = date.getFullYear();\r\n    //     //     const month = date.getMonth() + 1;\r\n\r\n    //     //     if(month === monthSelect && year === yearSelect){\r\n    //     //         try {\r\n    //     //             total += Number(item.amount);\r\n    //     //         }catch{\r\n    //     //             throw new Error('Invalid amount!');\r\n    //     //         }\r\n    //     //     }\r\n    //     // });\r\n\r\n    //     // return total;\r\n    // },[monthSelect, yearSelect]);\r\n\r\n    // const totalBalance = useMemo(() => {\r\n    //     return totalGains - totalExpenses;\r\n    // }, [totalGains, totalExpenses]);\r\n\r\n    const message = useMemo(() => {\r\n\r\n        if(balance < 0){\r\n            return {\r\n                title: \"Que triste!\",\r\n                description:\"Nesse mës vocë gastou mais do que deveria!\",\r\n                footerText:\"Verifique seus gastos.\",\r\n                icon:sadImg\r\n            }\r\n        }\r\n        else if(expenses === 0 && gains ===0) {\r\n            return {\r\n                title: \"Ops!\",\r\n                description:\"Neste mês, não há registros!!\",\r\n                footerText:\"Nenhum registro cadastrado esse mês.\",\r\n                icon:grinningImg\r\n            }\r\n        }\r\n        else if(balance === 0){\r\n            return {\r\n                title: \"Ufa!\",\r\n                description:\"Quase Hein!!\",\r\n                footerText:\"Tenha cuidado.\",\r\n                icon:grinningImg\r\n            }\r\n        }\r\n        else{\r\n            return {\r\n                title: \"Muito bem!\",\r\n                description:\"Sua carteira fechou positiva!\",\r\n                footerText:\"Continue assim.\",\r\n                icon:happyImg\r\n            }\r\n        }\r\n        \r\n    }, [balance, expenses, gains]);\r\n\r\n    const relationExpensesVersusGains = useMemo(() => {\r\n        const total = gains + expenses;\r\n\r\n        const percentGains = Number(((gains / total) * 100).toFixed(1));\r\n        const percentExpenses = Number(((expenses / total) * 100).toFixed(1));\r\n\r\n        const data = [\r\n            {\r\n                name: \"Entradas\",\r\n                value: gains,\r\n                percent: percentGains ? percentGains : 0,\r\n                color: '#e44c4e'\r\n            },\r\n            {\r\n                name: \"Saídas\",\r\n                value: expenses,\r\n                percent: percentExpenses ? percentExpenses : 0,\r\n                color: '#f7931b'\r\n            }\r\n        ];\r\n\r\n        return data;\r\n    },[gains, expenses]);\r\n\r\n    const historyData = useMemo(() => {\r\n        return listOfMonths.map((_, month ) => {\r\n            let amountEntry = 0;\r\n            gains.forEach(gain => {\r\n                const date = new Date(gain.date);\r\n                const gainMonth = date.getMonth();\r\n                const gainYear = date.getFullYear();\r\n\r\n                if(gainMonth === month && gainYear === yearSelect){\r\n                    try {\r\n                        amountEntry += Number(gain.amount);\r\n                    } catch {\r\n                        throw new Error('amountEntry is invalid!')\r\n                    }\r\n                }\r\n            });\r\n\r\n            let amountOutput = 0;\r\n            gains.forEach(expense => {\r\n                const date = new Date(expense.date);\r\n                const expenseMonth = date.getMonth() + 1;\r\n                const expenseYear = date.getFullYear();\r\n\r\n                if(expenseMonth === month && expenseYear === yearSelect){\r\n                    try {\r\n                        amountOutput += Number(expense.amount);\r\n                    } catch {\r\n                        throw new Error('amountOutput is invalid!')\r\n                    }\r\n                }\r\n            });\r\n\r\n            return {\r\n                monthNumber: month,\r\n                month: listOfMonths[month].substr(0,3),\r\n                amountEntry,\r\n                amountOutput\r\n            }\r\n        }).filter(item => {\r\n            const currentMonth = new Date().getMonth();\r\n            const currentYear = new Date().getFullYear();\r\n\r\n            return (yearSelect === currentYear && item.monthNumber <= currentMonth) || (yearSelect < currentYear)\r\n        })\r\n    },[yearSelect]);\r\n\r\n    const relationExpensesRecurrentVersusEventual = useMemo(() => {\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        expenses\r\n        .filter((expense) => {\r\n            const date = new Date(expense.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return month === monthSelect && year === yearSelect;\r\n        })\r\n        .forEach((expense) => {\r\n            if(expense.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(expense.amount);\r\n            }\r\n\r\n            if(expense.frequency === 'eventual'){\r\n                return amountEventual += Number(expense.amount);\r\n            }\r\n        });\r\n\r\n        const total = amountRecurrent + amountEventual;\r\n\r\n        const recurrentPercent = Number(((amountRecurrent / total) * 100).toFixed(1));\r\n        const eventualPercent = Number(((amountEventual / total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: \"Recorrentes\",\r\n                amount: amountRecurrent,\r\n                percent: recurrentPercent ? recurrentPercent : 0,\r\n                color: \"#f7931b\"\r\n            },\r\n            {\r\n                name: \"Eventuais\",\r\n                amount: amountEventual,\r\n                percent: eventualPercent ? eventualPercent : 0,\r\n                color: \"#e44c4e\"\r\n            }\r\n        ]\r\n    },[monthSelect, yearSelect]);\r\n\r\n    const relationGainsRecurrentVersusEventual = useMemo(() => {\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        gains\r\n        .filter((gain) => {\r\n            const date = new Date(gain.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return month === monthSelect && year === yearSelect;\r\n        })\r\n        .forEach((gain) => {\r\n            if(gain.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(gain.amount);\r\n            }\r\n\r\n            if(gain.frequency === 'eventual'){\r\n                return amountEventual += Number(gain.amount);\r\n            }\r\n        });\r\n\r\n        const total = amountRecurrent + amountEventual;\r\n\r\n        const recurrentPercent = Number(((amountRecurrent / total) * 100).toFixed(1));\r\n        const eventualPercent = Number(((amountEventual / total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: \"Recorrentes\",\r\n                amount: amountRecurrent,\r\n                percent: recurrentPercent ? recurrentPercent : 0,\r\n                color: \"#f7931b\"\r\n            },\r\n            {\r\n                name: \"Eventuais\",\r\n                amount: amountEventual,\r\n                percent: eventualPercent ? eventualPercent : 0,\r\n                color: \"#e44c4e\"\r\n            }\r\n        ]\r\n    },[monthSelect, yearSelect]);\r\n\r\n    return (\r\n        <Container>\r\n            <ContentHeader title=\"Dashboard\" lineColor='#f7931b'>\r\n                <SelectInput\r\n                    options={months}\r\n                    onChange={(e) => handleMonthSelected(e.target.value)}\r\n                    defaultValue={monthSelect}\r\n                />\r\n                <SelectInput\r\n                    options={years}\r\n                    onChange={(e) => handleYearSelected(e.target.value)}\r\n                    defaultValue={yearSelect}\r\n                />\r\n            </ContentHeader>\r\n\r\n            <Content>\r\n                <WalletBox\r\n                    title=\"Saldo\"\r\n                    amount={balance}\r\n                    footerLabel=\"atualizado com base\"\r\n                    icon=\"dolar\"\r\n                    color=\"#4e41f0\"\r\n                />\r\n\r\n                <WalletBox\r\n                    title=\"Entradas\"\r\n                    amount={gains}\r\n                    footerLabel=\"entradas\"\r\n                    icon=\"arrowUp\"\r\n                    color=\"#f7931b\"\r\n                />\r\n\r\n                <WalletBox\r\n                    title=\"Saídas\"\r\n                    amount={expenses}\r\n                    footerLabel=\"Saídas\"\r\n                    icon=\"arrowDown\"\r\n                    color=\"#e44c4e\"\r\n                />\r\n\r\n                <MessageBox\r\n                    title= {message.title}\r\n                    description={message.description}\r\n                    footerText={message.footerText}\r\n                    icon={message.icon}\r\n                />\r\n\r\n                <PieChartBox data={relationExpensesVersusGains} />\r\n\r\n                {/* <HistoryBox \r\n                    data={historyData}\r\n                    lineColorAmountEntry=\"#f7931b\"\r\n                    lineColorAmountOutout=\"#e44c4e\"\r\n                />\r\n\r\n                <BarChartBox\r\n                    data={relationExpensesRecurrentVersusEventual}\r\n                    title=\"Saídas\" \r\n                />\r\n\r\n                <BarChartBox\r\n                    data={relationGainsRecurrentVersusEventual}\r\n                    title=\"Entradas\" \r\n                /> */}\r\n                \r\n            </Content>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}